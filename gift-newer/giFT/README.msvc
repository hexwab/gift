$Id: README.msvc,v 1.12 2002/04/27 19:31:50 rossta Exp $

This document explains building giFT and giFT-FE using Microsoft Visual 
Studio 6.0.  If you have luck building giFT using another version of MSVC,
please let us know (gift-openft@lists.sf.net).

For information on building a self extracting executable using NullSoft's
SuperPimp NSIS installer, please see README.nsis.

You can build giFT on the command line, or from within the Visual Studio IDE.

Before starting, you may wish to install Visual C++ Service Pack 5:

http://download.microsoft.com/download/vstudio60ent/SP5/Wideband-Full/WIN98Me/EN-US/vs6sp5.exe
(136M!).

I suggest you *not* install the Processor Pack Upgrade, which screwed up 
my last Visual Studio installation.

To add support for compression, download, compile and install zlib 1.1.4 or greater:

http://prdownloads.sourceforge.net/libpng/zlib114.zip 

=================================
Building ZLIB on the Command Line
=================================

1. Copy the .\gift\win32\zlib.mak to the zlib directory.

2. cd to the zlib directory.

3. Type:

> nmake /f zlib.mak

To make a release version, type:

> nmake /f zlib.mak RELEASE=1

To make a version that link's OpenFT statically, type:

> nmake /f zlib.mak STATIC=1

Use the same options when compiling giFT, below.

4. Add the ZLIB_ROOT environment variable that points to the directory where
   you unzipped zlib114.zip.

> set ZLIB_ROOT=c:\zlib

=================================
Building ZLIB within the IDE
=================================

There isn't a .dsp to build ZLIB from within the IDE.
Your welcome to contribute one.

==================
Command Line Build
==================

Before you can build giFT at the command line, make sure you have
the following environmental variables defined:

  PATH=C:\Program Files\Microsoft Visual Studio\VC98\Bin:%PATH%

Optionally, you use can use the DOS 8.3 name:

  PATH=C:\PROGRA~1\MICROS~2\VC98\Bin:%PATH%

as Cygwin may have problems with spaces in the path.  Plus it's easier to read.

Also define:

  LIB=C:\Program Files\Microsoft Visual Studio\VC98\Lib:%LIB%

  INCLUDE=C:\Program Files\Microsoft Visual Studio\VC98\Include:%INCLUDE%

In Windows 95/98/ME, add these statements to the *end* of C:\AUTOEXEC.BAT.
In Windows NT/2000/XP, add these to the *end* of each environment variable
(using Start/Settings/Control Panel/System/Advanced/Environment Variables/
System).

Making giFT
-----------

To make giFT, open a Command Prompt window, and type the following:

> c:
> cd \giFT
> nmake /f Makefile.msvc

You will need to copy OpenFT\OpenFT?.dll to src\, or somewhere else in
your path, or add the gift/OpenFT directory to your search PATH.

When done, .\src\giFT.exe is created.

To make a release version (not currently recommended), type:

> nmake /f Makefile.msvc RELEASE=1

To make a version that uses zlib compression library, type:

> set ZLIB_ROOT=c:\zlib
> nmake /f Makefile.msvc ZLIB=1

To make a version that link's OpenFT statically, type:

> nmake /f Makefile.msvc STATIC=1

Making giFT-FE
--------------

Before you can build giFT-FE, you will need to download and install GTK+:

  http://www.gimp.org/~tml/gimp/win32/glib-2.0.0-20020316.zip (UPDATED!)
  http://www.gimp.org/~tml/gimp/win32/glib-dev-2.0.0-20020310.zip
  http://www.gimp.org/~tml/gimp/win32/gtk+-1.3.0-20020313.zip
  http://www.gimp.org/~tml/gimp/win32/gtk+-dev-1.3.0-20020310.zip
  http://www.gimp.org/~tml/gimp/win32/libiconv-1.7.zip
  http://www.gimp.org/~tml/gimp/win32/libiconv-dev-1.7.zip
  http://www.gimp.org/~tml/gimp/win32/libintl-0.10.40-20020101.zip
  http://www.gimp.org/~tml/gimp/win32/pkgconfig-0.11-20020310.zip

See http://www.gimp.org/~tml/gimp/win32/downloads.html for more information.

Add the GTK_ROOT environment variable that points to the directory where
you unzipped the above files.

> set GTK_ROOT=c:\gtk

To make giFT & giFT-FE, open a Command Prompt window, and type the following:

> c:
> cd \giFT
> nmake /f Makefile.msvc all-fe
 
To make *only* giFT-FE, type:

> nmake /f Makefile.msvc fe

When done, .\ui\giFT-FE.exe is created.

=======================
Visual Studio IDE Build
=======================

Making giFT
-----------

Open the giFT.dsw workspace file:

File/Open Workspace

  c:\gift\win32\giFT.dsw

Select Build/Batch Build/Rebuild All.

Please ignore the many warnings that appear.

When done, .\win32\Debug\giFT.exe is created.

I currently am not able to define USE_ZLIB when compiling giFT within the
IDE.  I get the following errors:

zlibd.lib(gzio.obj) : error LNK2001: unresolved external symbol __imp___fdopen
zlibd.lib(gzio.obj) : error LNK2001: unresolved external symbol __imp__vsprintf
zlibd.lib(gzio.obj) : error LNK2001: unresolved external symbol __imp__rewind
zlibd.lib(gzio.obj) : error LNK2001: unresolved external symbol __imp__fputc
zlibd.lib(deflate.obj) : error LNK2001: unresolved external symbol __imp__putc

If anyone has a fix for this, please submit it.  Thanks.

Making giFT-FE
--------------

Before you can build giFT-FE, you will need to download and install GTK+ 
(see above).

Next, you'll need to add GTK to your build environment.

Select Tools/Options/Directories/Include Files

Add the following directories to the *end* of the list:

  c:\gtk\include
  c:\gtk\include\glib-2.0
  c:\gtk\lib\glib-2.0\include
  c:\gtk\lib\gtk+\include

Select Library Files

Add the following directories to the *end* of the list:

  c:\gtk\lib

To build giFT-FE, open the giFT-all.dsw workspace file:

File/Open Workspace 

  c:\gift\win32\giFT-all.dsw

Select Build/Batch Build/Rebuild All.

Please ignore the many warnings that appear.

When done, win32/Debug/giFT.exe and win32/Debug/giFT-FE will be created.

Configuring giFT and giFT-FE
----------------------------

Depending on whether you defined USE_REGISTRY in src/conf.h, you will
need to edit your registry, or copy configuration files into the 
appropriate directory.

To use the registry, #define USE_REGISTRY in src/conf.h, and 
edit .\win32\gift.reg to suit.

To apply gift.reg to the registry, type:

> c:
> cd \giFT\win32
> regedit gift.reg

To use configuration files, #undef USE_REGISTRY in src/conf.h,
download http://2ebb.com:18080/gift/giftmsvc.zip, and extract the 
following files:

  win32/Debug/.giFT/gift.conf
  win32/Debug/.giFT/OpenFT/OpenFT.conf
  win32/Debug/.giFT/ui/ui.conf

into the directory where your giFT executable is.

For example, if your giFT.exe is in .\win32\Debug, extract gift.conf to
.\win32\Debug\.giFT.

Personally, I use configuration files, but either method has its 
benefits and drawbacks.

For debugging, you will need to copy other required files.

In linux, type:

$ cd win32
$ ./debug_setup.sh

Or, in Windows, type:

> cd win32
> debug_setup

Running giFT
------------

To run giFT, type:

> c:
> cd \gift\src (or \gift\src\Debug if using the IDE)
> giFT

Win32 giFT does not currently support command line options.

Running giFT-FE
---------------

To run giFT-FE, you will need to add c:\gtk\lib to your PATH (see above),
or copy the following files to a directory in your path, or the directory
where giFT-FE.exe lives:

  c:\gtk\lib\libgtk-0.dll
  c:\gtk\lib\libgdk-0.dll
  c:\gtk\lib\libglib-2.0-0.dll
  c:\gtk\lib\libintl-1.dll
  c:\gtk\lib\iconv.dll
  c:\gtk\lib\libgmodule-2.0-0.dll

Now, type:

> c:
> cd \gift\ui (or \gift\ui\Debug if using the IDE)
> giFT-FE

Note: This file contains carriage returns as most readers will be using Windows.
