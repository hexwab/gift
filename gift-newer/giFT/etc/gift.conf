# gift.conf
###############################################################################

###############################################################################
# MAIN

[main]

#
# Boolean determining whether or not this file has been reviewed and is 
# complete.  giFT will fail to start unless this is non-zero.  This is done
# so that we can make sure you, at the very least, read through this file.
#
# Default: none.
#
setup = 0

#
# Space separated list of hosts to allow connection to giFT's interface
# protocol (running default on port 1213).  This protocol is used for GUIs
# to communicate with giFT and could be considered a security risk to allow
# external connections.
#
# The following special keywords are supported:
#
#  ALL       - synonym for 0.0.0.0/0
#  LOCAL     - synonym for 127.0.0.0/8 192.168.0.0/16 172.0.0.0/11 10.0.0.0/8
#
# Bitwidth fields are optional
#
# Default: LOCAL
#
hosts_allow = LOCAL

#
# Colon separated list of protocol plugins to load by default.  If the
# absolute path is omitted, giFT will prepend the configured plugin directory,
# which defaults to /usr/local/lib/giFT in *nix, and /C/Program Files/giFT in
# Windows.
#
# *nix users: use the extension '.so', or whatever is appropriate for your OS.
# Windows users: use the extension '.dll'.
#
# Default: none
#
plugins = libOpenFT.so

###############################################################################
# DOWNLOAD CONTROLS

[download]

#
# Directory to store transfers while they are being operated on.  Temporary
# state files are also kept here.  It is recommended, but not required, that
# the incoming and completed directories are on the same partition (drive).
#
# Windows users: please use the following path specification:
#
# incoming=/[drive]/dir1/dir2:/[drive]/dir3/dir4 ...
#
# For example, to refer to C:\Program Files\giFT\incoming, use:
#
# incoming=/C/Program Files/giFT/incoming
#
# Default (*nix):    ~/.giFT/incoming
# Default (Windows): /C/Program Files/giFT/incoming
#
#incoming = 
#
# Directory which will contain files after they have successfully finished
# downloading.
#
# Default (*nix):    ~/.giFT/completed
# Default (Windows): /C/Program Files/giFT/completed
#
#completed =

###############################################################################
# SHARE SUBMISSION AND UPLOAD CONTROL

[sharing]

#
# Maximum amount of uploads allowed from the same user at any given time.  It
# is recommended that you keep this at 1 in order to prevent users from 
# unfairly queueing your connection.
#
# Default: 1
#
max_peruser_uploads = 1

#
# Determines whether or not to share directories which contain a leading dot.
# These directories are commonly meant to be "hidden" and thus should not be
# submitted to the network.
#
# Default: 1
#
hide_dot_files = 1

#
# Colon separated list of fully qualified paths you wish to share.  These 
# directories will be recursed at giFT's startup and the files contained 
# within will be subjected to an MD5 hashing.  The results will be cached and 
# will only be recalculated on a per share basis when the size or 
# modification time in the cache and on disk disagree, or the file name is 
# changed.
#
# Security notice: 
#  Do not share directories which may contain sensitive information, such as
#  ~ ($HOME).  Also note that any directories shared here will be stripped of
#  all but the last path element when submitted to other nodes for indexing,
#  effectively "hiding" the directory prefix.
#
# Windows users: please use the following path specification:
#
# /[drive]/dir1/dir2:/[drive]/dir3/dir4 ...
#
# For example, to refer to C:\Program Files\giFT\shares and D:\shares, use:
#
# root=/C/Program Files/giFT/shares:/D/shares
#
# Default: none
#
#root = /shares

#
# Maximum amount of simultaneous uploads allowed.  Setting this to -1 will
# cause giFT to not limit outgoing transfers.  0 effectively disables sharing.
# This may also be handled at run time via your GUI of choice.
#
# Default: -1
#
#max_uploads = -1

###############################################################################
# USER SPACE BANDWIDTH CONTROL

[bandwidth]

#
# Bandwidth throttling allows giFT to have some basic control over your
# bandwidth usage.  This code operates in user space, and as a result can not
# guarantee perfect accuracy.  If you wish to enable use this feature, please
# consider using a more reliable kernel space option first.
#
# The following configuration switches control the maximum number of bytes
# per second allowed for the given stream direction.  A setting of 0 will
# disable throttling for that direction.
#
# Default: 0
#
#downstream = 0
#upstream = 0
