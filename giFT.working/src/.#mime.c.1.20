/*
 * $Id: mime.c,v 1.20 2003/05/12 03:46:15 jasta Exp $
 *
 * Copyright (C) 2001-2003 giFT project (gift.sourceforge.net)
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the
 * Free Software Foundation; either version 2, or (at your option) any
 * later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 */

#include <ctype.h>

#include "gift.h"

#include "file.h"
#include "mime.h"
#include "parse.h"

#include "mime.h"

/*****************************************************************************/

struct _mime_type
{
	char *type;
	char *desc;
	char *ext;
};

Dataset *mime_types = NULL;

/*****************************************************************************/

static int insert_type (char *ext, char *type, char *desc)
{
	struct _mime_type *mi;

	if (!(mi = malloc (sizeof (struct _mime_type))))
		return FALSE;

	mi->type = STRDUP (type);
	mi->desc = STRDUP (desc);
	mi->ext  = STRDUP (ext);

	dataset_insert (&mime_types, ext, STRLEN_0(ext), mi, 0);
	return TRUE;
}

static void load_types ()
{
	FILE *f;
	char *buf = NULL;
	char *ptr, *filename;

	filename = malloc (strlen (platform_data_dir ()) + 12); /* /mime.types\0 */
	sprintf (filename, "%s/mime.types", platform_data_dir ());

	if (!(f = fopen (filename, "r")))
	{
		GIFT_ERROR (("failed to open %s", filename));
		return;
	}

	free (filename);

	while (file_read_line (f, &buf))
	{
		char *ext, *exts0, *exts;
		char *type;

		ptr = buf;

		string_trim (ptr);

		if (*ptr == '#')
			continue;

		/* break type and extension list */
		type = string_sep_set (&ptr, " \t");

		if (!ptr || !ptr[0])
			continue;

		string_trim (ptr);

		/* create a unique entry for each type (to satisfy the hash table
		 * lookup) */
		exts0 = exts = STRDUP (ptr);

		while ((ext = string_sep (&exts, " ")))
			insert_type (ext, type, NULL);

		free (exts0);
	}

	fclose (f);
}

/*****************************************************************************/

/* locates the appropriate mime type based on extension
 * NOTE: supplying ext as non-NULL is for optimization purposes only.  it is
 * not a requirement */
char *mime_type (char *file)
{
	struct _mime_type *mime_info;
	char *ext, *extl;
	char *type;

#ifndef BENCHMARK
	if (!mime_types)
		load_types ();
#endif

	if ((ext = strrchr (file, '.')))
		ext++;

	extl = string_lower (STRDUP (ext));

	/* check for an existent and known extension, otherwise default to
	 * text/plain */
	if ((mime_info = dataset_lookup (mime_types, extl, STRLEN_0 (extl))))
		type = mime_info->type;
	else
		type = "text/plain";

	free (extl);

	return type;
}

static int mime_lookup (ds_data_t *key, ds_data_t *value, char *mime)
{
	struct _mime_type *val = value->data;

	return (STRCMP (mime, val->type) == 0);
}

char *mime_type_lookup (char *mime)
{
	struct _mime_type *type;

#ifndef BENCHMARK
	if (!mime_types)
		load_types ();
#endif

	type = dataset_find (mime_types, DS_FIND(mime_lookup), mime);

	if (!type)
	{
		/* THIS IS SO BROKEN! */
		if (!insert_type (mime, mime, NULL))
			return NULL;

		if (!(type = dataset_find (mime_types, DS_FIND(mime_lookup), mime)))
			return NULL;
	}

	return type->type;
}
