/*
 * $Id$
 *
 * Copyright (C) 2004 giFT project (gift.sourceforge.net)
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the
 * Free Software Foundation; either version 2, or (at your option) any
 * later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 */

/* A bloom filter that can be efficiently synchronized with remote
 * hosts. */
struct {
	BloomFilter *filter;
	BloomFilter *sync;
} SyncFilter;

SyncFilter md5_filter;

BOOL ft_routing_init (void)
{
	md5_filter.filter = ft_bloom_new (MD5_FILTER_BITS, MD5_FILTER_HASHES,
				    16 << 3, TRUE);

	md5_filter.sync = ft_bloom_clone (md5_filter.filter);

	return TRUE;
}

BOOL ft_routing_free (void)
{
	ft_bloom_free (md5_filter.filter);
	ft_bloom_free (md5_filter.sync);

	return TRUE;
}

BOOL send_filter (FTNode *node, FTPacket *pkt)
{
	/* TODO */
	return FALSE;
}

/* Sends updated routing information to all peers. */
BOOL ft_routing_sync (SyncFilter *f)
{
	FTPacket *pkt;

	if (!(pkt = ft_packet_new (FT_FILTER_SYNC, 0)))
		return FALSE;

	ft_bloom_diff (f->filter, f->sync);

//	FT->DBGFN (FT, "

	if (!ft_bloom_empty (f->sync))
	{
		ft_packet_put_ustr (pkt, f->sync->table, 1 << (f->sync->bits-3));
		
		ft_netorg_foreach (FT_NODE_SEARCH, FT_NODE_CONNECTED, 0,
                           FT_NETORG_FOREACH(send_filter), pkt);
	}

	ft_bloom_free (f->sync);
	
	f->sync = ft_bloom_clone (f->filter);

	ft_packet_free (pkt);

	return TRUE;
}
