/*
 * daemon.c
 *
 * Copyright (C) giFT project (gift.sourceforge.net)
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the
 * Free Software Foundation; either version 2, or (at your option) any
 * later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 */

#include "openft.h"

#include "netorg.h"
#include "search.h"

/*****************************************************************************/

/**/extern Connection *ft_self;
/**/extern unsigned long search_unique_id;

/*****************************************************************************/

typedef void (*EventCallback) (Protocol *p, Connection *c, Dataset *event);
#define EV_HANDLER(func) static void ft_##func (Protocol *p, Connection *c, Dataset *event)

EV_HANDLER (daemon_promote);
EV_HANDLER (daemon_search);
EV_HANDLER (daemon_share);
EV_HANDLER (daemon_stats);

/*****************************************************************************/

struct _daemon_event
{
	char *name;
	EventCallback cb;
}
daemon_events[] =
{
	{ "promote",    ft_daemon_promote },
	{ "search",     ft_daemon_search  },
	{ "share",      ft_daemon_share   },
	{ "stats",      ft_daemon_stats   },
	{ NULL,         NULL              },
};

/*****************************************************************************/

void ft_daemon_callback (Protocol *p, Connection *c, Dataset *event)
{
	struct _daemon_event *ptr;
	char *ev_name;

	ev_name = dataset_lookup (event, "head");

	for (ptr = daemon_events; ptr->name; ptr++)
	{
		if (strcasecmp (ptr->name, ev_name))
			continue;

		/* found the appropriate event */
		(*ptr->cb) (p, c, event);

		return;
	}

	printf ("no handler found for %s\n", ev_name);
}

/*****************************************************************************/

static Connection *broadcast_status (Connection *c, Node *node, void *data)
{
	ft_node_send (c, FT_CLASS_RESPONSE, "%hu", NODE (ft_self)->class);

	return NULL;
}

EV_HANDLER (daemon_promote)
{
	node_class_add (ft_self, NODE_SEARCH);

	conn_foreach ((ConnForeachFunc) broadcast_status, NULL,
	              NODE_USER, NODE_CONNECTED, 0);
}

/*****************************************************************************/

#if 0
EV_HANDLER (daemon_connect)
{
	char *ip, *port;

	ip   = dataset_lookup (event, "ip");
	port = dataset_lookup (event, "port");

	if (!ip || !port)
		return;

	ft_connect (p, ip, atoi (port));
}
#endif

/*****************************************************************************/

static Connection *broadcast_search (Connection *c, Node *node,
									 Dataset *dataset)
{
	Connection   *conn  = dataset_lookup (dataset, "connection");
	unsigned long type  = (unsigned long) dataset_lookup (dataset, "type");
	char         *query = dataset_lookup (dataset, "query");

	printf ("\t%s:%hu\n", net_ip_str (node->ip), node->port);

	if (!search_unique_id)
		search_unique_id++;

	ft_node_send (c, FT_SEARCH_REQUEST, "%lu%hu%s",
	              search_unique_id, (unsigned short) type, query);

	search_id_new (search_unique_id, conn, type, query);

	dataset_insert (dataset, "ref", (void *) 1);

	return NULL;
}

EV_HANDLER (daemon_search)
{
	Dataset *dataset = NULL;
	int      search_type;
	char    *query;
	char    *realm;

	query = dataset_lookup (event, "query");
	realm = dataset_lookup (event, "realm");

	if (!query)
		return;

	search_type = SEARCH_FILENAME;

	if (realm)
	{
		/* TODO - this is a hack, dont use realm for this */
		if (!strcasecmp (realm, "md5"))
			search_type = SEARCH_MD5;
		else if (!strcasecmp (realm, "user"))
			search_type = SEARCH_HOST;
	}

	dataset_insert (dataset, "connection", c);
	dataset_insert (dataset, "query",      query);
	dataset_insert (dataset, "type",       (void *) search_type);

	printf ("bouncing search for '%s' to ...\n", query);

	if (NODE (ft_self)->class & NODE_SEARCH)
	{
		List *ptr;

		trace();
		printf ("\tmyself\n");

		for (ptr = ft_search (search_type, query); ptr; ptr = ptr->next)
		{
			FileShare *file = ptr->data;

			printf("local search result: %s\n", file->file);
			/* ignore local shares */
			if (file->host != 0)
				search_reply (p, c, 0, ft_self, file);
		}

		search_reply (p, c, 0, ft_self, NULL);
	}

	conn_foreach ((ConnForeachFunc) broadcast_search, dataset,
	              NODE_SEARCH, NODE_CONNECTED, 0);

	/* this will be NULL if broadcast_search found no one to send to */
	if (dataset_lookup (dataset, "ref"))
		search_unique_id++;
	else
		interface_close (c);

	dataset_clear (dataset);
}

/*****************************************************************************/

static Connection *share_sync (Connection *c, Node *node, void *data)
{
	ft_node_send (c, FT_SHARE_REQUEST, NULL);
	share_local_submit (c->protocol, c);

	return NULL;
}

EV_HANDLER (daemon_share)
{
	char *action;

	if (!(action = dataset_lookup (event, "action")))
		return;

	if (strcmp (action, "sync"))
		return;

	/* share_local_rebuild (); */

	/* sync == re-read ~/.giFT/shares */
	share_local_import ();
	conn_foreach ((ConnForeachFunc) share_sync, NULL,
	              NODE_SEARCH, NODE_CONNECTED, 0);
}

/*****************************************************************************/

static Connection *stats (Connection *c, Node *node, Connection *dc)
{
	interface_send (dc, "NODE",
	                "HOST=s",   net_ip_str (node->ip),
	                "PORT=i",   node->port,
	                "CLASS=s",  node_class_str (node),
	                "USERS=i",  node->users,
	                "SHARES=i", node->shares,
	                "MEGS=i",   node->megs,
	                NULL);

	return NULL;
}

EV_HANDLER (daemon_stats)
{
	stats (ft_self, NODE (ft_self), c);
	conn_foreach ((ConnForeachFunc) stats, c, NODE_USER, NODE_CONNECTED, 0);

	interface_close (c);
}
