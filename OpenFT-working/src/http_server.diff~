Index: ft_http_server.c
===================================================================
RCS file: /cvsroot/gift/OpenFT/src/ft_http_server.c,v
retrieving revision 1.59
diff -u -r1.59 ft_http_server.c
--- ft_http_server.c	23 Dec 2003 17:56:12 -0000	1.59
+++ ft_http_server.c	14 Apr 2004 00:40:22 -0000
@@ -36,6 +36,22 @@
 
 /*****************************************************************************/
 
+static char *version_string = NULL;
+
+char *ft_http_server_version (void)
+{
+	if (!version_string)
+	{
+		version_string = stringf_dup ("OpenFT/%i.%i.%i.%i (%s)",
+			     OPENFT_MAJOR, OPENFT_MINOR,
+			     OPENFT_MICRO, OPENFT_REV,
+			     platform_version ()
+			     );
+	}
+
+	return version_string;
+}
+
 /*
  * Accept a new incoming HTTP connection.  Please note that this does not
  * necessarily mean this is a download or an upload, merely that it is an
@@ -270,7 +286,6 @@
 	assert (decoded != NULL);
 
 	spath = file_secure_path (decoded);
-	assert (spath != NULL);
 
 	free (decoded);
 
@@ -279,7 +294,7 @@
 	 * snapshot of the [connected] nodes cache for debugging/diagnostic
 	 * purposes.  This may be replaced in the future...
 	 */
-	if (strcmp (spath, "/nodes") == 0)
+	if (spath && strcmp (spath, "/nodes") == 0)
 	{
 		if ((share = access_nodes_share (req)))
 			ret = UPLOAD_AUTH_ALLOW;
@@ -293,8 +308,18 @@
 		 * before we can request authorization from giFT.  Then, we need to
 		 * actually ask giFT for authorization.
 		 */
-		if ((share = FT->share_lookup (FT, SHARE_LOOKUP_HPATH, spath)))
+		if (spath && (share = FT->share_lookup (FT, SHARE_LOOKUP_HPATH, spath)))
+		{
+			FTNode *node;
 			ret = FT->upload_auth (FT, net_ip_str (c->host), share, auth_info);
+			
+			/* allow our parent a free slot */
+			if (ret == UPLOAD_AUTH_MAX &&
+			    (node = ft_netorg_lookup (c->host)) &&
+			    (node->state & FT_NODE_CONNECTED) &&
+			    (node->ninfo.klass & FT_NODE_PARENT))
+				ret = UPLOAD_AUTH_ALLOW;
+		}
 		else
 			ret = UPLOAD_AUTH_NOTSHARED;
 	}
@@ -349,6 +374,7 @@
 	char *md5str;
 	char *buf_range;
 	char *buf_length;
+	char *server;
 	off_t start = 0;
 	off_t stop  = 0;
 	off_t entity;
@@ -377,10 +403,21 @@
 	md5str = hash->algo->dspfn (hash->data, hash->len);
 	assert (md5str != NULL);
 
+	server = ft_http_server_version ();
+	assert (server != NULL);
+
 	dataset_insertstr (&reply->keylist, "Content-Range",  buf_range);
 	dataset_insertstr (&reply->keylist, "Content-Length", buf_length);
 	dataset_insertstr (&reply->keylist, "Content-Type",   share->mime);
 	dataset_insertstr (&reply->keylist, "Content-MD5",    md5str);
+	dataset_insertstr (&reply->keylist, "Server",         server);
+
+	if (strcmp (req->request, "/nodes") == 0)
+	{
+		dataset_insertstr (&reply->keylist, "X-Class", stringf ("%d", openft->ninfo.klass));
+		dataset_insertstr (&reply->keylist, "X-ClassMin", stringf ("%d", openft->klass_min));
+		dataset_insertstr (&reply->keylist, "X-ClassMax", stringf ("%d", openft->klass_max));
+	}
 
 	if (openft->ninfo.alias)
 		dataset_insertstr (&reply->keylist, "X-OpenftAlias", openft->ninfo.alias);
@@ -404,11 +441,16 @@
 	 * protocol as the protocol-specific status.
 	 */
 	buf_retry = stringf_dup ("%u", (60 * SECONDS));
-	buf_pos   = stringf_dup ("%u of %u",
-	                         auth_info->queue_pos, auth_info->queue_ttl);
+
+	if (auth_info->queue_pos && auth_info->queue_ttl)
+	{
+		buf_pos = stringf_dup ("%u of %u",
+				       auth_info->queue_pos,
+				       auth_info->queue_ttl);
+		dataset_insertstr (&reply->keylist, "X-QueuePosition", buf_pos);
+	}
 
 	dataset_insertstr (&reply->keylist, "X-ShareStatus",   "Queued");
-	dataset_insertstr (&reply->keylist, "X-QueuePosition", buf_pos);
 	dataset_insertstr (&reply->keylist, "X-QueueRetry",    buf_retry);
 
 	free (buf_retry);
