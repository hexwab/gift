? dbname.diff
? diff
? ft_search_db.c.b0rk
? ft_search_db.c.conf2
? ft_search_db.c.conflicted
? ft_search_db.c.temp
? ft_search_db.c.vanilla
? ft_shost.c.unused
? ft_shost.h.unused
? ft_xfer.c
? hashfn.diff
? netorg.diff
? queue.diff
? rlimit.diff
? search-bonus.diff
? search-separate.diff
? test
Index: ft_conf.h
===================================================================
RCS file: /cvsroot/gift/OpenFT/src/ft_conf.h,v
retrieving revision 1.27
diff -u -r1.27 ft_conf.h
--- ft_conf.h	26 Dec 2003 06:44:20 -0000	1.27
+++ ft_conf.h	4 Jan 2004 04:31:01 -0000
@@ -44,12 +44,19 @@
 #define FT_CFG_SEARCH_MINPEERS    ft_cfg_get_int("search/minpeers=8")
 #define FT_CFG_SEARCH_MAXPEERS    ft_cfg_get_int("search/peers=12")
 #define FT_CFG_SEARCH_TTL         ft_cfg_get_int("search/default_ttl=2")
+#define FT_CFG_LOCATE_TTL         ft_cfg_get_int("search/locate_ttl=3")
 #define FT_CFG_SEARCH_RESULTS     ft_cfg_get_int("search/max_results=800")
 #define FT_CFG_SEARCH_RESULTS_REQ ft_cfg_get_int("search/max_results_req=800")
-#define FT_CFG_MAX_TTL            ft_cfg_get_int("search/max_ttl=2")
+#define FT_CFG_MAX_TTL            ft_cfg_get_int("search/max_ttl=3")
 #define FT_CFG_MAX_RESULTS        FT_CFG_SEARCH_RESULTS
-#define FT_CFG_MAX_CHILDREN       ft_cfg_get_int("search/children=85")
+#define FT_CFG_MAX_CHILDREN       ft_cfg_get_int("search/children=100")
+#define FT_CFG_MIN_CHILDREN       ft_cfg_get_int("search/min_children=30")
 #define FT_CFG_MAX_CONNECTIONS    (30)
+#define FT_CFG_MAX_ACTIVE         ft_cfg_get_int("connections/max_active=-1")
+
+#define FT_CFG_PROMOTE_CHANCE     (0.1)
+#define FT_CFG_DEMOTE_CHANCE      (0.002)
+
 #define FT_CFG_MAX_ACTIVE         ft_cfg_get_int("connections/max_active=-1")
 
 #define FT_CFG_SEARCH_ENV_PATH    ft_cfg_get_path("search/env_path", "OpenFT/db")
Index: ft_conn.c
===================================================================
RCS file: /cvsroot/gift/OpenFT/src/ft_conn.c,v
retrieving revision 1.54
diff -u -r1.54 ft_conn.c
--- ft_conn.c	23 Dec 2003 04:56:16 -0000	1.54
+++ ft_conn.c	4 Jan 2004 04:31:01 -0000
@@ -20,6 +20,8 @@
 #include "ft_node_cache.h"
 #include "ft_conn.h"
 
+#include "ft_search_db.h"              /* automatic node promotion */
+
 #ifdef HAVE_SYS_TIME_H
 # include <sys/time.h>
 #endif /* HAVE_SYS_TIME_H */
@@ -54,6 +56,22 @@
  */
 static int max_active = -1;
 
+/**
+  * The number of 2 minute blocks we can go without a parent before we
+  * begin automatic search node promotion tests.
+  */
+#define IMPOVERISH_MIN (4)
+
+/**
+  * Ditto, but for seeing if our services as a search node are no longer
+  * required.
+  */
+#define SURPLUS_MIN (6)
+
+static unsigned int poverty_count = 0;
+
+static unsigned int surplus_count = 0;
+
 /*****************************************************************************/
 
 static BOOL drop_notalive (FTNode *node, void *udata)
@@ -320,6 +338,125 @@
 
 /*****************************************************************************/
 
+static BOOL check_promote (void)
+{
+	float diceroll;
+	int ret;
+	
+	assert (!(openft->ninfo.klass & FT_NODE_SEARCH));
+	if (!(openft->klass_max & FT_NODE_SEARCH))
+		return FALSE;
+
+	diceroll = ((float)rand() / (RAND_MAX + 1.0));
+	
+	if (diceroll > FT_CFG_PROMOTE_CHANCE)
+		return FALSE;
+
+	/* if you're hap^H^H^Hfirewalled and you know it... */
+	if (openft->ninfo.port_openft == 0)
+		return FALSE;
+
+	/* insert other	tests here */
+
+	FT->warn (FT, "Automatically promoting to FT_NODE_SEARCH status");
+
+	if ((ret = ft_search_db_init (FT_CFG_SEARCH_ENV_PATH, FT_CFG_SEARCH_ENV_CACHE)))
+		openft->ninfo.klass |= FT_NODE_SEARCH;
+	else
+		FT->DBGFN (FT, "search db startup failed");
+	
+	surplus_count = 0;
+
+	return ret;
+}
+
+static BOOL drop_after_demotion (FTNode *node, void *udata)
+{
+	if (!node->ninfo.klass & FT_NODE_PARENT)
+		ft_session_stop (FT_CONN(node));
+	return TRUE;
+}
+
+static BOOL drop_children (FTNode *node, void *udata)
+{
+	ft_node_remove_class (node, FT_NODE_CHILD);
+	return TRUE;
+}
+
+static BOOL check_demote (void)
+{
+	int n, min;
+	float chance, diceroll;
+
+	assert (openft->ninfo.klass & FT_NODE_SEARCH);
+
+	/* Don't demote unless we automatically promoted earlier */
+	if (openft->klass_min & FT_NODE_SEARCH)
+		return FALSE;
+
+	n = ft_netorg_length (FT_NODE_CHILD, FT_NODE_CONNECTED);
+	min = FT_CFG_MIN_CHILDREN;
+
+	if (n >= min)
+	{
+		surplus_count = 0;
+		return FALSE;
+	}
+
+	/* wait a while for child acquisition */
+	if (++surplus_count < SURPLUS_MIN)
+		return FALSE;
+
+	/* 
+	 * This needs to be random so that newly-orphaned children
+	 * have time to locate a new parent before said parent demotes
+	 * itself too.
+	 *
+	 * This should become less critical as network size increases.
+	 */
+	chance = FT_CFG_DEMOTE_CHANCE;
+	chance *= ((float)min / (n + 1)); /* few children == more chance to demote */
+
+	/*
+	 * we haven't had any incoming connections yet; we might be
+         * firewalled but unaware of the fact...
+	 */
+	if (openft->ninfo.indirect)
+		chance *= 5; 
+
+	diceroll = ((float)rand() / (RAND_MAX + 1.0));
+
+	if (diceroll > chance)
+		return FALSE;
+	
+	/* OK, do it */
+	FT->DBGFN (FT, "demoting: firewalled=%d, children=%d, min=%d, surplus_count=%d",
+		   openft->ninfo.indirect, n, min, surplus_count);
+
+	openft->ninfo.klass &= ~FT_NODE_SEARCH;
+	ft_search_db_destroy ();
+	
+	/*
+	 * Drop all non-PARENT connections first.  FIXME: this might
+	 * not be necessary, and is yet another place where network
+	 * topology is hardcoded, but I'm trying it anyway in an
+	 * effort to remove demoted nodes as quickly as possible.
+	 */
+	ft_netorg_foreach (FT_NODE_USER, FT_NODE_CONNECTED, 0,
+			   FT_NETORG_FOREACH(drop_after_demotion), NULL);
+
+	/*
+	 * Remove CHILD status from any remaining connections.  Note
+	 * that this does *not* tell the remote node that we've done
+	 * so, thus causing problems if our PARENT is also our
+	 * CHILD...
+	 */
+	ft_netorg_foreach (FT_NODE_CHILD, FT_NODE_CONNECTED, 0,
+			       FT_NETORG_FOREACH(drop_children), NULL);
+	
+	return TRUE;
+}
+
 static int acquire_new_stuff (void)
 {
 	BOOL need_parents;
@@ -333,6 +470,35 @@
 	need_peers   = ft_conn_need_peers();
 	need_index   = ft_conn_need_index();
 
+	/* 
+	 * 4 possibilities here:
+	 * search orphan action
+	 * no     no     stable, do nothing
+	 * no     yes    try autopromotion
+	 * yes    no     check if we're no longer needed
+	 * yes    yes    wait for a parent (don't demote without one)
+	 *
+	 * In particular, this last case means that the minimum child
+	 * count is inapplicable on tiny networks with only one search
+	 * node.  
+	 */
+
+	if (openft->ninfo.klass & FT_NODE_SEARCH)
+	{
+		poverty_count = 0;
+
+		if (!need_parents)
+			check_demote ();
+	}
+	else 
+	{
+		if (!need_parents)
+			poverty_count = 0;
+		else
+			if (++poverty_count >= IMPOVERISH_MIN)
+				check_promote ();
+	}
+
 	/* nothing is needed, get out of here */
 	if (!need_parents && !need_peers && !need_index)
 		return 0;
@@ -563,7 +729,6 @@
 			return limit;
 		}
 
-
 		limit = (int)rlim.rlim_cur;
 	}
 #endif /* HAVE_SYS_RESOURCE_H */
@@ -579,15 +744,15 @@
 	/* the default (-1) asks us to make an educated guess */
 	if ((nconns = FT_CFG_MAX_ACTIVE) == -1)
 	{
-		if (!(openft->ninfo.klass & FT_NODE_SEARCH))
-			nconns = 600;
-		else
+		if (openft->klass_max & FT_NODE_SEARCH)
 		{
 			int nchildren = FT_CFG_MAX_CHILDREN;
 
 			/* 2n * (n / 3) */
 			nconns = (7 * nchildren) / 3;
 		}
+		if (nconns < 400)
+			nconns = 400;
 
 		FT->warn (FT, "guessing max_active=%d", nconns);
 	}
Index: ft_http_server.c
===================================================================
RCS file: /cvsroot/gift/OpenFT/src/ft_http_server.c,v
retrieving revision 1.59
diff -u -r1.59 ft_http_server.c
--- ft_http_server.c	23 Dec 2003 17:56:12 -0000	1.59
+++ ft_http_server.c	4 Jan 2004 04:31:02 -0000
@@ -294,7 +294,17 @@
 		 * actually ask giFT for authorization.
 		 */
 		if ((share = FT->share_lookup (FT, SHARE_LOOKUP_HPATH, spath)))
+		{
+			FTNode *node;
 			ret = FT->upload_auth (FT, net_ip_str (c->host), share, auth_info);
+			
+			/* allow our parent a free slot */
+			if (ret == UPLOAD_AUTH_MAX &&
+			    (node = ft_netorg_lookup (c->host)) &&
+			    (node->state & FT_NODE_CONNECTED) &&
+			    (node->ninfo.klass & FT_NODE_PARENT))
+				ret = UPLOAD_AUTH_ALLOW;
+		}
 		else
 			ret = UPLOAD_AUTH_NOTSHARED;
 	}
@@ -404,11 +414,16 @@
 	 * protocol as the protocol-specific status.
 	 */
 	buf_retry = stringf_dup ("%u", (60 * SECONDS));
-	buf_pos   = stringf_dup ("%u of %u",
-	                         auth_info->queue_pos, auth_info->queue_ttl);
+
+	if (auth_info->queue_pos && auth_info->queue_ttl)
+	{
+		buf_pos = stringf_dup ("%u of %u",
+				       auth_info->queue_pos,
+				       auth_info->queue_ttl);
+		dataset_insertstr (&reply->keylist, "X-QueuePosition", buf_pos);
+	}
 
 	dataset_insertstr (&reply->keylist, "X-ShareStatus",   "Queued");
-	dataset_insertstr (&reply->keylist, "X-QueuePosition", buf_pos);
 	dataset_insertstr (&reply->keylist, "X-QueueRetry",    buf_retry);
 
 	free (buf_retry);
Index: ft_node.c
===================================================================
RCS file: /cvsroot/gift/OpenFT/src/ft_node.c,v
retrieving revision 1.54
diff -u -r1.54 ft_node.c
--- ft_node.c	23 Dec 2003 05:44:25 -0000	1.54
+++ ft_node.c	4 Jan 2004 04:31:02 -0000
@@ -57,7 +57,7 @@
 	/* this will destroy all the necessary associations for us */
 	if (node->session)
 	{
-		if (node->session->search_db)
+		if (node->session->search_db && !openft->shutdown)
 			FT->warn (FT, "removing node with an active search database!");
 
 		ft_session_stop (FT_CONN(node));
@@ -557,6 +557,10 @@
 
 	/* nothing happened */
 	if (!loss && !gain)
+		return;
+
+	/* shutting down */
+	if (openft->shutdown)
 		return;
 
 	/* the API tells us we need to register class changes, although the
Index: ft_openft.c
===================================================================
RCS file: /cvsroot/gift/OpenFT/src/ft_openft.c,v
retrieving revision 1.58
diff -u -r1.58 ft_openft.c
--- ft_openft.c	27 Dec 2003 01:57:26 -0000	1.58
+++ ft_openft.c	4 Jan 2004 04:31:02 -0000
@@ -156,7 +156,7 @@
 		}
 
 		/* lets not make a big fuss out of this setting */
-		openft->klass_alw &= ~FT_NODE_SEARCH;
+		openft->klass_max &= ~FT_NODE_SEARCH;
 	}
 
 #ifndef USE_LIBDB
@@ -209,10 +209,11 @@
 	openft->ninfo.alias       =      STRDUP(FT_CFG_NODE_ALIAS);
 	openft->ninfo.port_openft =  (in_port_t)FT_CFG_NODE_PORT;
 	openft->ninfo.port_http   =  (in_port_t)FT_CFG_NODE_HTTP_PORT;
-	openft->klass_alw         = (ft_class_t)FT_CFG_NODE_CLASS_ALLOW;
+	openft->klass_min         = (ft_class_t)FT_CFG_NODE_CLASS;
+	openft->klass_max         = (ft_class_t)FT_CFG_NODE_CLASS_ALLOW;
 
-	/* hmm, maybe ninfo.indirect is a bad idea? */
-	openft->ninfo.indirect = BOOL_EXPR (openft->ninfo.port_openft == 0);
+	/* nope, ninfo.indirect is not a bad idea */
+	openft->ninfo.indirect = 1;
 
 	/* make sure that the parameters supplied above dont conflict in some way */
 	if (!(clamp_openft_params (p, openft)))
@@ -302,6 +303,8 @@
 
 	/* disconnect everyone for cleanliness */
 	ft_netorg_clear (FT_NETORG_FOREACH(cleanup_conn), NULL);
+
+	ft_search_db_destroy ();
 
 	/* cleanup */
 	config_free (openft->cfg);
Index: ft_openft.h
===================================================================
RCS file: /cvsroot/gift/OpenFT/src/ft_openft.h,v
retrieving revision 1.48
diff -u -r1.48 ft_openft.h
--- ft_openft.h	23 Dec 2003 04:22:35 -0000	1.48
+++ ft_openft.h	4 Jan 2004 04:31:02 -0000
@@ -100,7 +100,8 @@
 	TCPC            *bind_openft;      /**< Listen on the OpenFT port */
 	TCPC            *bind_http;        /**< Listen on the OpenFT HTTP port */
 
-	ft_class_t       klass_alw;        /**< Class mask for auto-promotion */
+	ft_class_t       klass_min;        /**< Automatic class management */
+	ft_class_t       klass_max;
 
 	unsigned int     avail;            /**< Cached upload availability */
 
@@ -110,6 +111,7 @@
 	BOOL             shutdown;         /**< Try to hackishly eliminate a race
 	                                    *   condition when our plugin is
 	                                    *   unloading */
+	BOOL             incoming_ok;      /* are we sure we aren't firewalled? */
 };
 
 /*
Index: ft_search.c
===================================================================
RCS file: /cvsroot/gift/OpenFT/src/ft_search.c,v
retrieving revision 1.56
diff -u -r1.56 ft_search.c
--- ft_search.c	23 Dec 2003 04:22:35 -0000	1.56
+++ ft_search.c	4 Jan 2004 04:31:02 -0000
@@ -286,6 +286,7 @@
 {
 	FTPacket *pkt;
 	int       type;
+	int       ttl;
 
 	assert (search != NULL);
 	assert (search->event != NULL);
@@ -297,10 +298,19 @@
 	type = search->params.type;
 
 #ifdef FT_SEARCH_PARANOID
-	if (FT_SEARCH_TYPE(type) == FT_SEARCH_FILENAME)
+	if (FT_SEARCH_METHOD(type) == FT_SEARCH_FILENAME)
 		type |= FT_SEARCH_HIDDEN;
 #endif /* FT_SEARCH_PARANOID */
 
+	switch (FT_SEARCH_METHOD(type))
+	{
+	case FT_SEARCH_MD5:
+		ttl = FT_CFG_LOCATE_TTL;
+		break;
+	default:
+		ttl = FT_CFG_SEARCH_TTL;
+	}
+
 	if (!(pkt = ft_packet_new (FT_SEARCH_REQUEST, 0)))
 		return FALSE;
 
@@ -328,7 +338,7 @@
 	/* add the TTL of this search, that is, the number of nodes that will
 	 * forward this search along to their peers until the search is stopped
 	 * in the network */
-	ft_packet_put_uint16 (pkt, FT_CFG_SEARCH_TTL, TRUE);
+	ft_packet_put_uint16 (pkt, ttl, TRUE);
 
 	/* write the maximum number of results we want to get back, so that this
 	 * search may more efficiently complete when the result set is large */
@@ -415,8 +425,7 @@
 		                        FT_NETORG_FOREACH(send_search), search);
 	}
 
-	FT->DBGFN (FT, "%s: searched %i nodes (ttl=%i)",
-	           ft_guid_fmt (search->guid), n, FT_CFG_SEARCH_TTL);
+	FT->DBGFN (FT, "%s: searched %i nodes", ft_guid_fmt (search->guid), n);
 
 	/* we are using this logic to determine how many parents are being waited
 	 * on, so that the code can clean itself up immediately if no nodes were
Index: ft_search_db.c
===================================================================
RCS file: /cvsroot/gift/OpenFT/src/ft_search_db.c,v
retrieving revision 1.105
diff -u -r1.105 ft_search_db.c
--- ft_search_db.c	27 Dec 2003 18:37:51 -0000	1.105
+++ ft_search_db.c	4 Jan 2004 04:31:04 -0000
@@ -954,8 +954,6 @@
 	 * this key */
 	if ((ret = dbp->put (dbp, NULL, &key, &data, DB_NOOVERWRITE)))
 	{
-		ERR_DB_SDB("DB->put", ret, sdb);
-
 		assert (ret == DB_KEYEXIST);
 		FT->DBGFN (FT, "duplicate MD5 %s (%s)",
 		           md5_fmt (keyrec.md5), sdb->share_idx_name);
@@ -2313,6 +2311,8 @@
 		env_search_path = NULL;
 	}
 #endif /* USE_LIBDB */
+
+	db_initialized = FALSE;
 }
 
 /*****************************************************************************/
@@ -2380,6 +2380,11 @@
 
 	if (!sdb)
 		return TRUE;
+
+#ifndef SEARCH_DB_BENCHMARK
+	if (openft->shutdown)
+		return TRUE;
+#endif
 
 	/*
 	 * Schedule the removal and leave.  We cannot block for the entire
Index: ft_search_db.h
===================================================================
RCS file: /cvsroot/gift/OpenFT/src/ft_search_db.h,v
retrieving revision 1.21
diff -u -r1.21 ft_search_db.h
--- ft_search_db.h	26 Oct 2003 13:15:43 -0000	1.21
+++ ft_search_db.h	4 Jan 2004 04:31:04 -0000
@@ -81,6 +81,7 @@
 #  include <db4/db.h>
 # endif
 # ifdef HAVE_DB_H
+//#include "/usr/local/BerkeleyDB.4.1/include/db.h"
 #  include <db.h>
 # endif
 # ifdef HAVE_DB3_DB_H
Index: ft_search_exec.c
===================================================================
RCS file: /cvsroot/gift/OpenFT/src/ft_search_exec.c,v
retrieving revision 1.55
diff -u -r1.55 ft_search_exec.c
--- ft_search_exec.c	2 Nov 2003 12:09:06 -0000	1.55
+++ ft_search_exec.c	4 Jan 2004 04:31:04 -0000
@@ -40,7 +40,7 @@
  * Enable if you wish debugging information regarding the elapsed search time
  * to be displayed.
  */
-/* #define SEARCH_TIMING */
+#define SEARCH_TIMING
 
 /*****************************************************************************/
 
@@ -110,11 +110,13 @@
 	uint32_t  *ptr;
 	int        ret = TRUE;
 
+#if 0
 	if (sdata->f_realm)
 	{
 		if (strncmp (file->mime, sdata->f_realm, strlen (sdata->f_realm)))
 			return FALSE;
 	}
+#endif
 
 	if (!(share = share_get_udata (file, "OpenFT")))
 		return FALSE;
@@ -603,6 +605,13 @@
 
 	if (!fill_sdata (&sdata, nmax, resultfn, udata, type, realm, query, exclude))
 		return -1;
+
+#if 0
+	if (type & FT_SEARCH_LOCAL)
+		max_results = config_get_int (OPENFT->conf, "search/max_local_results=1000");
+	else
+		max_results = config_get_int (OPENFT->conf, "search/max_results=1000");
+#endif
 
 #ifdef SEARCH_TIMING
 	sw = stopwatch_new (TRUE);
Index: ft_session.c
===================================================================
RCS file: /cvsroot/gift/OpenFT/src/ft_session.c,v
retrieving revision 1.89
diff -u -r1.89 ft_session.c
--- ft_session.c	23 Dec 2003 21:29:39 -0000	1.89
+++ ft_session.c	4 Jan 2004 04:31:05 -0000
@@ -648,6 +648,8 @@
 	FTNode     *node;
 	FTSession  *session;
 
+	openft->ninfo.indirect = 0;
+
 	if (!(c = tcp_accept (listen, FALSE)))
 	{
 		FT->err (FT, "accept: %s", GIFT_NETERROR());
Index: ft_share_file.c
===================================================================
RCS file: /cvsroot/gift/OpenFT/src/ft_share_file.c,v
retrieving revision 1.21
diff -u -r1.21 ft_share_file.c
--- ft_share_file.c	2 Nov 2003 12:09:07 -0000	1.21
+++ ft_share_file.c	4 Jan 2004 04:31:05 -0000
@@ -51,7 +51,7 @@
 	Share   *file;
 	FTShare *share;
 
-	if (!(file = share_new_ex (FT, NULL, 0, filename, mime, size, 0)))
+	if (!(file = share_new_ex (FT, filename, mime, size, 0)))
 		return NULL;
 
 	if (!share_set_hash (file, "MD5", md5, 16, TRUE))
Index: proto/ft_sharing.c
===================================================================
RCS file: /cvsroot/gift/OpenFT/src/proto/ft_sharing.c,v
retrieving revision 1.15
diff -u -r1.15 ft_sharing.c
--- proto/ft_sharing.c	23 Dec 2003 18:32:45 -0000	1.15
+++ proto/ft_sharing.c	4 Jan 2004 04:31:05 -0000
@@ -48,6 +48,12 @@
 	if (node->session->search_db)
 		return FALSE;
 
+	if (node->version < OPENFT_0_2_0_1)
+	{
+		FT->DBGSOCK (FT, FT_CONN(node), "refusing old would-be child");
+		return FALSE;
+	}
+
 	/*
 	 * NOTE: This is _NOT_ handled gracefully by the network and
 	 * absolutely needs to be!  This cannot be left like this.  The round
