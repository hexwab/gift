/*
 * $Id: ft_netorg.c,v 1.19 2003/08/10 14:36:11 jasta Exp $
 *
 * Copyright (C) 2001-2003 giFT project (gift.sourceforge.net)
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the
 * Free Software Foundation; either version 2, or (at your option) any
 * later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 */

#include "ft_openft.h"

#include "ft_netorg.h"

/*****************************************************************************/

/*
 * We are dividing each list into it's own list structure and assigning a
 * pointer to the last processed element so that we can traverse quickly (and
 * over multiple times) through all connections of a particular connection
 * state.  Otherwise, we would be required to iterate through thousands of
 * potentially useless nodes looking for what we want.
 */
struct conn_list
{
	ListLock *list;                    /* actual list of nodes */
	List     *iptr;                    /* pointer to last processed chain */
	int       count;                   /* number of entries in list */
};

static struct conn_list final;         /* FT_NODE_CONNECTED */
static struct conn_list limbo;         /* FT_NODE_CONNECTING */
static struct conn_list disco;         /* FT_NODE_DISCONNECTED */

/*
 * Additionally, we will want to hold all nodes in a table designed for fast
 * lookups, and for that we are using a Dataset (backend DATASET_HASH).
 * ::ft_netorg_lookup cannot be expensive.
 */
static Dataset *nodes = NULL;

#define NUM_STATES 4
#define NUM_CLASSES 12

/* yes, there is an (intentional) off-by-one error here */
static unsigned int lengths[NUM_STATES * NUM_CLASSES + 1] = { 0 };

#define length_index(state, log2class) (&lengths[state + log2class * NUM_STATES]) 

/*****************************************************************************/

static struct conn_list *get_conn_list (FTNodeState state)
{
	struct conn_list *list_addr = NULL;

	/* set the list_addr value so that we may either return the initialized
	 * list or construct one ourselves */
	switch (state)
	{
	 case FT_NODE_CONNECTED:    list_addr = &final; break;
	 case FT_NODE_CONNECTING:   list_addr = &limbo; break;
	 case FT_NODE_DISCONNECTED: list_addr = &disco; break;
	}

	assert (list_addr != NULL);

	/* apready non-NULL, no need to do anything but return it */
	if (list_addr->list)
		return list_addr;

	/* construct the list lock */
	if (!(list_addr->list = list_lock_new ()))
		return NULL;

	list_addr->iptr = NULL;
	return list_addr;
}

/*****************************************************************************/

static int add_sorted (FTNode *a, FTNode *b)
{
	int ret;

	/* sort by version, last_session, then uptime */
	if ((ret = FT_VERSION_CMP(a->version, b->version)))
		return -ret;

	if ((ret = INTCMP(a->last_session, b->last_session)))
		return -ret;

	if ((ret = INTCMP(a->uptime, b->uptime)))
		return -ret;

	/* equal */
	return 0;
}

static int add_conn_list (FTNodeState state, FTNode *node)
{
	struct conn_list *clist;

	/* attempt to retrieve the appropriate conn_list pointer for the inputted
	 * state */
	if (!(clist = get_conn_list (state)))
		return FALSE;

	/* list_lock currently has some pretty nasty bugs with this function,
	 * eventually the will need to be fixed */
	list_lock_insert_sorted (clist->list, (CompareFunc)add_sorted, node);
	clist->count++;

	/* initialize the list pointer to the very first chain  if necessary */
	if (!clist->iptr)
		clist->iptr = clist->list->list;

	return TRUE;
}

static void update_lengths (FTNode *node,
			    FTNodeClass klass,
			    FTNodeState state,
			    FTNodeClass class_orig,
			    FTNodeState state_orig)
{
	int cbit;

	int state_changed = (state != state_orig);
	int class_changed;

	if (state_changed)
		class_changed = klass | class_orig;
	else
		class_changed = klass ^ class_orig;

	for (cbit=0; class_changed; cbit++, class_changed>>=1)
	{
		if (class_changed & 1)
		{
			*length_index(state, cbit) += (klass & (1 << cbit)) ? 1 : -1;

			if (state_changed)
				*length_index(state_orig, cbit) -= (klass & (1 << cbit)) ? 1 : -1;
		}
	}
}

void ft_netorg_add (FTNode *node)
{
	if (!node || node->ip == 0)
		return;

	/* add to the appropriate state-specific conn list */
	if (!add_conn_list (node->state, node))
		return;

	/* add to the lookup hash table */
	if (!nodes)
		nodes = dataset_new (DATASET_HASH);

	dataset_insert (&nodes, &node->ip, sizeof (node->ip), node, 0);

#if 0
	FT->DBGFN (FT, "%s %x %x", net_ip_str (node->ip), node->klass, node->state);
#endif

	update_lengths (node, node->klass, node->state, 0, node->state);
}

/*****************************************************************************/

static void rem_conn_list (FTNodeState state, FTNode *node)
{
	struct conn_list *clist;

	if (!(clist = get_conn_list (state)))
		return;

	/*
	 * Before we can remove this node we need to check if the current
	 * iterator is resting on the node we are trying to delete.  If that is
	 * the case, we will reset it's value to NULL and then handle that
	 * special condition after removal (just in case the first node is also
	 * the one we are removing).
	 */
	if (clist->iptr && clist->iptr->data == node)
		clist->iptr = NULL;

	list_lock_remove (clist->list, node);
	clist->count--;

	if (!clist->iptr)
		clist->iptr = clist->list->list;
}

void ft_netorg_remove (FTNode *node)
{
	if (!node)
		return;

	assert (node->ip != 0);

	rem_conn_list (node->state, node);
	dataset_remove (nodes, &node->ip, sizeof (node->ip));

#if 0
	FT->DBGFN (FT, "%s %x %x", net_ip_str (node->ip), node->klass, node->state);
#endif

	update_lengths (node, 0, node->state, node->klass, node->state);
}

/*****************************************************************************/

void ft_netorg_change (FTNode *node,
                       FTNodeClass class_orig,
                       FTNodeState state_orig)
{
	if (!node->ip)
		return;

	update_lengths (node, node->klass, node->state, class_orig, state_orig);

#if 0
	FT->DBGFN (FT, "%s %x %x", net_ip_str (node->ip), node->klass, node->state);
#endif

	/* no change, you lie! */
	if (node->state == state_orig)
		return;

	/* not inserted anywhere, how do you expect us to change it? */
	assert (ft_netorg_lookup (node->ip));

	rem_conn_list (state_orig, node);
	add_conn_list (node->state, node);
}

/*****************************************************************************/

FTNode *ft_netorg_lookup (in_addr_t ip)
{
	if (ip == 0)
		return NULL;

	return dataset_lookup (nodes, &ip, sizeof (ip));
}

/*****************************************************************************/

static int conn_list_iter (struct conn_list *clist,
                           FTNodeClass klass, FTNodeState state, int iter,
                           FTNetorgForeach func, void *udata)
{
	List *start, *ptr;
	int   looped = FALSE;
	int   ret;
	int   processed = 0;

	/* if iter is non-zero, we were asked to iterate a set number of nodes
	 * and we should therefore begin from the place we last left off.
	 * otherwise, we start from the very beginning of the current list */
	if (iter)
		start = clist->iptr;
	else
		start = (clist->list ? clist->list->list : NULL);

	/* loop through all nodes in the clist provided, beginning at start but
	 * optionally moving to the beginning of the list again, if warranted */
	for (ptr = start ;; ptr = list_next (ptr))
	{
		FTNode *node;

		/* if iter was supplied, we need the ability to begin looping
		 * from the start of the list again, if we reach the end */
		if (iter && !ptr && !looped)
		{
			ptr = (clist->list ? clist->list->list : NULL);
			looped = TRUE;
		}

		/* end of list */
		if (!ptr)
			break;

		/* we wrapped to the beginning, but have just reached the original
		 * start so we should bail out */
		if (looped && ptr == start)
			break;

		node = ptr->data;
		assert (node != NULL);

		/* filter by klass, if non-zero */
		if (klass && !(node->klass & klass))
			continue;

		/*
		 * While we were iterating this list (it's locked, remember) a state
		 * changed must have occurred for this node that will not be
		 * reflected in this iteration.  Ideally, we could check to make sure
		 * this node is in the lock removal list, but for now I think it's
		 * safe to just ignore the condition.
		 */
		if (node->state != state)
			continue;

		/*
		 * Execute the callback requested for each node satisfying the above
		 * conditions.  The return value of this is indicates whether or not
		 * the above filtering was "enough" to actually process the node.  If
		 * we return FALSE here, iter should be left alone.
		 */
		if (!(ret = func (node, udata)))
			continue;

		/* increment the total number of nodes processed by this function,
		 * and bail out if we have reached our desired limit */
		processed++;
		if (iter)
		{
			if (processed >= iter)
				break;

			/* move the iterator along with the local ptr, but only after a
			 * node has been processed (see above) */
			clist->iptr = ptr->next;
		}
	}

	return processed;
}

static int foreach_list (FTNodeClass klass, FTNodeState state, int iter,
                         FTNetorgForeach func, void *udata)
{
	struct conn_list *clist = NULL;
	int ret;

	if (!(clist = get_conn_list (state)))
		return 0;

	/* lock write access to the soon to be iterating list so that `func' is
	 * unable to manipulate it at this very moment, as many times it will
	 * want to change classes, remove nodes, etc */
	list_lock (clist->list);

	/* loop through all nodes that match klass and state up to iter (if
	 * originally non-zero), calling the user supplied func while passing
	 * along udata */
	ret = conn_list_iter (clist, klass, state, iter, func, udata);

	/* check to make sure if the iterator was scheduled for removal */
	if (clist->iptr)
	{
		assert (clist->list != NULL);

		if (list_find (clist->list->lock_remove, clist->iptr->data))
			clist->iptr = NULL;
	}

	/* allow further writes to be performed, as well as merging all queued
	 * writes into the structure */
	list_unlock (clist->list);

	/* move the iterator back to the beginning of the list (if it was removed
	 * from the condition above) */
	if (!clist->iptr)
		clist->iptr = (clist->list ? clist->list->list : NULL);

	return ret;
}

static int iter_state (FTNodeClass klass, FTNodeState state, int iter, int *looped,
                       FTNetorgForeach func, void *udata)
{
	int ret;
	int allow = 0;

	if (iter > 0)
	{
		if ((allow = iter - *looped) <= 0)
			return 0;
	}

	ret = foreach_list (klass, state, allow, func, udata);
	*looped += ret;

	return ret;
}

int ft_netorg_foreach (FTNodeClass klass, FTNodeState state, int iter,
                       FTNetorgForeach func, void *udata)
{
	int looped = 0;

	if (!func)
		return 0;

	if (state)
		looped = foreach_list (klass, state, iter, func, udata);
	else
	{
		/* state = 0x00 indicates that all states should be processed,
		 * therefore requiring multiple calls to foreach_list that are
		 * capable of persisting iteration data */
		iter_state (klass, FT_NODE_CONNECTED, iter, &looped, func, udata);
		iter_state (klass, FT_NODE_CONNECTING, iter, &looped, func, udata);
		iter_state (klass, FT_NODE_DISCONNECTED, iter, &looped, func, udata);
	}

	if (iter)
		assert (looped <= iter);

	return looped;
}

/*****************************************************************************/

static BOOL dummy (FTNode *node, void *udata)
{
	return TRUE;
}

int ft_netorg_length (FTNodeClass klass, FTNodeState state)
{
	int len=0;

	int cbit;

	for (cbit=0; klass; cbit++, klass>>=1)
		if (klass & 1)
			len += *length_index (state, cbit);

#if 0
	FT->DBGFN (FT, "%x %x (=%d)", klass, state, len);
#endif

	return len;
}

/*****************************************************************************/

static void free_conn_list (struct conn_list *clist)
{
	list_lock_free (clist->list);
	memset (clist, 0, sizeof (struct conn_list));
}

void ft_netorg_clear (FTNetorgForeach func, void *udata)
{
	ft_netorg_foreach (0x00, 0x00, 0, func, udata);

	free_conn_list (&final);
	free_conn_list (&limbo);
	free_conn_list (&disco);

	dataset_clear (nodes);
	nodes = NULL;
}

/*****************************************************************************/

#ifdef OPENFT_DEBUG
static int dump_node (FTNode *node, void *udata)
{
	FT->DBGFN (FT, "%s: %hu", ft_node_fmt (node), node->klass);
	return TRUE;
}

void ft_netorg_dump ()
{
	ft_netorg_foreach (0x00, 0x00, 0,
	                   FT_NETORG_FOREACH(dump_node), NULL);
}
#endif /* OPENFT_DEBUG */
