/*
 * $Id: ft_search_exec.c,v 1.46 2003/07/02 12:10:18 jasta Exp $
 *
 * Copyright (C) 2001-2003 giFT project (gift.sourceforge.net)
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the
 * Free Software Foundation; either version 2, or (at your option) any
 * later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 */

#include <errno.h>

#include "ft_openft.h"

#include "lib/stopwatch.h"

#include "ft_search.h"
#include "ft_search_db.h"
#include "ft_xfer.h"

#include "md5.h"

#include "ft_search_exec.h"

/*****************************************************************************/

struct sdata;
typedef BOOL (*FTSearchFunc) (struct sdata *sdata, FileShare *File);

/* holds search query info as it passes along through the mechanisms defined
 * here */

/*
 * Holds search query information as it passes through the set of functions
 * defined here.  This is useful to avoid passing multiple arguments at a time
 * and nothing more.
 */
typedef struct sdata
{
	FTNode          *node;             /* cached node that owns the shares
	                                    * we are currently iterating */
	size_t           nmax;
	size_t           matches;          /* number of successful matches */

	FTSearchResultFn resultfn;         /* callback when a result is found */
	void            *udata;            /* user data for the above callback */

	FTSearchType     type;             /* type of search we are performing */
	FTSearchFunc     sfunc;            /* local matching function for this
	                                    * search type */

	/**
	 * @name FT_SEARCH_FILENAME
	 */
	unsigned long    avail;            /* cached availability */

	char            *f_query;          /* query string */
	char            *f_exclude;        /* exclude string */
	uint32_t        *f_qtokens;        /* query tokens list */
	uint32_t        *f_etokens;        /* exclude tokens list */
	char            *f_realm;          /* optional realm to filter by */

	/**
	 * @name FT_SEARCH_MD5
	 */
	unsigned char   *m_query;          /* 16-byte md5sum */

	/**
	 * @name FT_SEARCH_HOST
	 *
	 * This is partially deprecated.  It is only used to check incoming
	 * browse results now.
	 */
	in_addr_t        h_query;          /* 4-byte host */
} SearchData;

/*****************************************************************************/
/*
 * COMPARE FUNCTIONS
 *
 * NOTE:
 * These are used primarily on the user node side to verify incoming search
 * results.
 */

static BOOL cmp_filename (SearchData *sdata, FileShare *file)
{
	FTShare   *share;
	uint32_t  *tptr;
	uint32_t  *ptr;
	int        ret = TRUE;

#if 0
	if (sdata->f_realm)
	{
		if (strncmp (file->mime, sdata->f_realm, strlen (sdata->f_realm)))
			return FALSE;
	}
#endif

	if (!(share = share_get_udata (file, "OpenFT")))
		return FALSE;

	assert (share->tokens != NULL);

	/* check exclusion first */
	for (ptr = sdata->f_etokens; ptr && *ptr; ptr++)
	{
		for (tptr = share->tokens; *tptr; tptr++)
		{
			if (*tptr != *ptr)
				continue;

			/* matched exclusion, bail out */
			return FALSE;
		}
	}

	/* check main token list */
	for (ptr = sdata->f_qtokens; ptr && *ptr; ptr++)
	{
		int matched = FALSE;

		for (tptr = share->tokens; *tptr; tptr++)
		{
			if (*tptr == *ptr)
			{
				matched = TRUE;
				break;
			}
		}

		if (!matched)
			return FALSE;
	}

	return ret;
}

static BOOL cmp_md5 (SearchData *sdata, FileShare *file)
{
	Hash *hash;

	if (!(hash = share_get_hash (file, "MD5")))
		return FALSE;

	return (memcmp (hash->data, sdata->m_query, hash->len) == 0);
}

static BOOL cmp_host (SearchData *sdata, FileShare *file)
{
	/* non-local search */
	if (sdata->node)
		return (sdata->node->ip == sdata->h_query);

	/*
	 * local search
	 *
	 * NOTE:
	 * we don't have the ip address of the local node, therefore we cannot
	 * verify that this was in fact a match
	 *
	 * TODO:
	 * search by host should not be done like this...sigh
	 */
	return FALSE;
}

/*****************************************************************************/

#define TOKEN_PUNCT ",`'!?*"
#define TOKEN_DELIM "\\/ _-.[]()\t"

/*****************************************************************************/

static void token_remove_punct (char *token)
{
	char *ptr;

	if (!token[0])
		return;

	while ((ptr = string_sep_set (&token, TOKEN_PUNCT)))
	{
		if (!token)
			continue;

		string_move (token - 1, token);
		token--;
	}
}

static uint32_t tokenize_str (char *str)
{
	uint32_t hash = 0;

	if (!str)
		return 0;

	if (!(hash = *str++))
		return 0;

	while (*str)
		hash = (hash << 5) - hash + *str++;

	return hash;
}

static int cmp_token (const void *a, const void *b)
{
	uint32_t *ta = (uint32_t *)a;
	uint32_t *tb = (uint32_t *)b;

	if (*ta < *tb)
		return -1;

	if (*ta > *tb)
		return 1;

	return 0;
}

static int remove_dups (uint32_t *tokens, int num)
{
	uint32_t lt = 0;
	int      nt;
	int      t;

	if (num <= 0)
		return num;

	/* sort first */
	qsort (tokens, num, sizeof (uint32_t), cmp_token);

	for (t = 0, nt = 0; t < num && nt < num; t++)
	{
		if (lt && tokens[t] == lt)
			continue;

		lt = tokens[t];
		tokens[nt++] = tokens[t];
	}

	tokens[nt] = 0;

	return nt;
}

static int tokens_resize (uint32_t **tokens, int *alloc, int newsize)
{
	uint32_t *resize;

	if (!(resize = realloc (*tokens, newsize * sizeof (uint32_t))))
		return FALSE;

	*tokens = resize;
	*alloc = newsize;

	return TRUE;
}

/*
 * tokens are delimited by the set TOKEN_DELIM
 * tokens are stripped by the set TOKEN_PUNCT
 */
static void token_add_str (uint32_t **tokens, int *tok, int *tokalloc,
                           char *s)
{
	char *sdup, *s0;
	char *tstr;

	if (!*tokalloc)
	{
		assert (*tokens == NULL);
		if (!tokens_resize (tokens, tokalloc, 32))
			return;
	}

	if (!(sdup = STRDUP (s)))
		return;

	s0 = sdup;

	while ((tstr = string_sep_set (&sdup, TOKEN_DELIM)))
	{
		if (*tok >= (*tokalloc - 1))
		{
			if (!tokens_resize (tokens, tokalloc, *tokalloc * 2))
				break;
		}

		token_remove_punct (tstr);

		if (*tstr)
			(*tokens)[(*tok)++] = tokenize_str (string_lower (tstr));
	}

	free (s0);

	(*tokens)[*tok] = 0;
	*tok = remove_dups (*tokens, *tok);
}

uint32_t *ft_search_tokenize (char *string)
{
	uint32_t *tokens   = NULL;
	int       tok      = 0;
	int       tokalloc = 0;

	if (!string)
		return NULL;

	token_add_str (&tokens, &tok, &tokalloc, string);

	return tokens;
}

uint32_t *ft_search_tokenizef (FileShare *file)
{
	uint32_t *tokens   = NULL;
	int       tok      = 0;
	int       tokalloc = 0;

	if (!file)
		return NULL;

	token_add_str (&tokens, &tok, &tokalloc, SHARE_DATA(file)->path);
	token_add_str (&tokens, &tok, &tokalloc, share_get_meta (file, "tracknumber"));
	token_add_str (&tokens, &tok, &tokalloc, share_get_meta (file, "artist"));
	token_add_str (&tokens, &tok, &tokalloc, share_get_meta (file, "album"));
	token_add_str (&tokens, &tok, &tokalloc, share_get_meta (file, "title"));
	token_add_str (&tokens, &tok, &tokalloc, share_get_meta (file, "genre"));

	return tokens;
}

/*****************************************************************************/

static int fill_sdata (SearchData *sdata, int nmax,
                       FTSearchResultFn resultfn, void *udata,
                       FTSearchType type, char *realm,
                       void *query, void *exclude)
{
	if (!query)
		return FALSE;

	memset (sdata, 0, sizeof (SearchData));

	sdata->nmax     = (size_t)nmax;    /* maximum results */
	sdata->resultfn = resultfn;        /* cb used when result confirmed */
	sdata->udata    = udata;           /* arbitrary user data for resultfn */
	sdata->type     = type;            /* type of search */

	switch (FT_SEARCH_TYPE(sdata->type))
	{
	 case FT_SEARCH_FILENAME:
		{
			uint32_t *qtokens;
			uint32_t *etokens;

			/* hidden searches are pretokenized */
			if (sdata->type & FT_SEARCH_HIDDEN)
			{
				qtokens = query;
				etokens = exclude;

				query   = NULL;
				exclude = NULL;
			}
			else
			{
				if (!(qtokens = ft_search_tokenize (query)))
					return FALSE;

				etokens = ft_search_tokenize (exclude);
			}

			sdata->sfunc     = (FTSearchFunc)cmp_filename;
			sdata->f_query   = query;
			sdata->f_exclude = exclude;
			sdata->f_qtokens = qtokens;
			sdata->f_etokens = etokens;
			sdata->f_realm   = realm;
		}
		break;
	 case FT_SEARCH_MD5:
		{
			sdata->sfunc = (FTSearchFunc)cmp_md5;

			if (!(sdata->m_query = md5_bin (query)))
				return FALSE;
		}
		break;
	 case FT_SEARCH_HOST:
		{
			sdata->sfunc = (FTSearchFunc)cmp_host;

			if (!(sdata->h_query = net_ip (query)))
				return FALSE;
		}
		break;
	 default:
		abort ();
		break;
	}

	return (sdata->sfunc ? TRUE : FALSE);
}

static void clear_sdata (SearchData *sdata)
{
	int ret;

	if (sdata->resultfn)
	{
		ret = sdata->resultfn (NULL, sdata->udata);
		assert (ret == TRUE);
	}

	if (FT_SEARCH_TYPE(sdata->type) == FT_SEARCH_FILENAME)
	{
		if (sdata->f_query)
		{
			free (sdata->f_qtokens);
			free (sdata->f_etokens);
		}
	}
	else if (FT_SEARCH_TYPE(sdata->type) == FT_SEARCH_MD5)
	{
		free (sdata->m_query);
	}
}

static BOOL cmp_sdata (SearchData *sdata, FileShare *file)
{
	if (!file)
		return FALSE;

	return sdata->sfunc (sdata, file);
}

/*****************************************************************************/

static void add_result (SearchData *sdata, FileShare *file)
{
	FTShare *share;

	assert (file != NULL);

	if (sdata->matches >= sdata->nmax)
		return;

	if (!(share = share_get_udata (file, "OpenFT")))
	{
		FT->DBGFN (FT, "this shouldnt happen");
		return;
	}

	assert (share->node != NULL);

	if (!share->node->session)
	{
		FT->DBGFN (FT, "%s: stale lookup", ft_node_fmt (share->node));
		return;
	}

	/* make sure that our local availability is updated so that we can
	 * masquerade as a regular search result */
	if (share->node == FT_SELF)
		share->node->session->avail = sdata->avail;

	ft_share_ref (file);

	if (sdata->resultfn (file, sdata->udata))
		sdata->matches++;
}

/*****************************************************************************/

static int final_match (FileShare *file, SearchData *sdata)
{
	/* all we really need to require is that the specified realm matches the
	 * result, if supplied */
	if (!sdata->f_realm)
		return TRUE;

	return (strncmp (file->mime, sdata->f_realm, strlen (sdata->f_realm)) == 0);
}

static void search_remote (SearchData *sdata)
{
	Array     *matches = NULL;
	FileShare *match;
	int        hits;
	int        max_hits;

	if (sdata->matches >= sdata->nmax)
		return;

	/* set the maximum allowed matches for this search method */
	max_hits = sdata->nmax - sdata->matches;

	/*
	 * Perform the appropriate search, filling the matches array with dirty
	 * hits.  Further verification will be performed after this block,
	 * however it is clear that this checking should occur in ft_search_db.c,
	 * consider this a TODO :)
	 */
	switch (FT_SEARCH_TYPE(sdata->type))
	{
	 case FT_SEARCH_MD5:
		hits = ft_search_db_md5 (&matches, sdata->m_query, max_hits);
		break;
	 case FT_SEARCH_FILENAME:
		hits = ft_search_db_tokens (&matches, sdata->f_realm,
		                            sdata->f_qtokens, sdata->f_etokens,
		                            max_hits);
		break;
	 default:
		abort ();                      /* shouldnt happen */
		break;
	}

	/*
	 * Iterate all matches simply to go through the regular add_result API
	 * unification.  This is actually much more wasteful than you'd think
	 * considering the add_result API doesn't even need a buffered list to
	 * operate on...sigh.
	 */
	while ((match = array_shift (&matches)))
	{
		/* apply the final clean match on the result to make sure it fits all
		 * the search criteria */
		if (final_match (match, sdata))
			add_result (sdata, match);

		/* if final match fails, ref will be 1 here, and thus the data
		 * cleared...alternatively, if the resultfn decides it does not need
		 * to buffer, it will unref once for itself and the data here will be
		 * cleared */
		ft_share_unref (match);
	}

	array_unset (&matches);
}

static int key_as_md5 (ds_data_t *key, ds_data_t *value,
                       SearchData *sdata)
{
	if (sdata->matches >= sdata->nmax)
		return DS_BREAK;

	/* use the iterative matching routines */
	if (sdata->sfunc (sdata, value->data))
		add_result (sdata, value->data);

	return DS_CONTINUE;
}

static void search_local (SearchData *sdata)
{
	if (!(sdata->type & FT_SEARCH_LOCAL) || sdata->matches >= sdata->nmax)
		return;

	sdata->avail = ft_upload_avail ();

	sdata->node = NULL;
	share_foreach (DS_FOREACH_EX(key_as_md5), sdata);
}

/*****************************************************************************/

/*
 * and the fun begins...
 */
int ft_search (int nmax, FTSearchResultFn resultfn, void *udata,
               FTSearchType type, char *realm,
               void *query, void *exclude)
{
#ifdef OPENFT_DEBUG
	StopWatch *sw;
#endif /* OPENFT_DEBUG */
	SearchData sdata;
	int        results;

	if (!query)
		return -1;

	/* ensure that nmax is a sane value */
	if (nmax > FT_SEARCH_RESULTS || nmax <= 0)
		nmax = FT_SEARCH_RESULTS;

	if (!fill_sdata (&sdata, nmax, resultfn, udata, type, realm, query, exclude))
		return -1;

#if 0
	if (type & FT_SEARCH_LOCAL)
		max_results = config_get_int (OPENFT->conf, "search/max_local_results=1000");
	else
		max_results = config_get_int (OPENFT->conf, "search/max_results=1000");
#endif

#ifdef OPENFT_DEBUG
	sw = stopwatch_new (TRUE);
#endif /* OPENFT_DEBUG */

	/* search the files we are currently sharing */
	search_local (&sdata);

	/* search the remote nodes databases
	 * NOTE: this does not mean to search over OpenFT, merely look at
	 * shares that were submitted via OpenFT from our CHILD nodes */
	search_remote (&sdata);

#ifdef OPENFT_DEBUG
	if (FT_SEARCH_TYPE(type) == FT_SEARCH_FILENAME)
	{
		FT->DBGFN (FT, "%i(%i): %.06fs elapsed", (int)type, (int)sdata.matches,
		           stopwatch_elapsed (sw, NULL));
	}

	stopwatch_free (sw);
#endif /* OPENFT_DEBUG */

	/* destroy any allocated data we had created in fill_sdata */
	results = (int)sdata.matches;
	clear_sdata (&sdata);

	assert (results <= nmax);
	return results;
}

BOOL ft_search_cmp (FileShare *file, FTSearchType type,
                    char *realm, void *query, void *exclude)
{
	FTShare *share;
	SearchData sdata;
	BOOL ret;

	if (!query || !ft_share_complete (file))
		return FALSE;

	if (!fill_sdata (&sdata, 1, NULL, NULL, type, realm, query, exclude))
		return FALSE;

	if ((share = share_get_udata (file, "OpenFT")))
		sdata.node = share->node;

	ret = cmp_sdata (&sdata, file);

	clear_sdata (&sdata);

	return ret;
}
