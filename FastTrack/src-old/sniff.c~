/*
Copyright (c) 1999 Rafal Wojtczuk <nergal@avet.com.pl>. All rights reserved.
See the file COPYING for license details.
*/


#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netinet/in_systm.h>
#include <arpa/inet.h>
#include <string.h>
#include <stdio.h>
#include <nids.h>

enum {
	STATE_CLIENT_KEY,
	STATE_SERVER_KEY,
	STATE_ESTABLISHED
};

struct session {
	FSTCipher *in_cipher;
        FSTCipher *out_cipher;
        unsigned int in_xinu;
        unsigned int out_xinu;
	int state;
	unsigned long in_rand;
};

#define INT(x) ntohl((unsigned long*)(hlf->data+x));

#define int_ntoa(x)	inet_ntoa(*((struct in_addr *)&x))

// struct tuple4 contains addresses and port numbers of the TCP connections
// the following auxiliary function produces a string looking like
// 10.0.0.1,1024,10.0.0.2,23
char *
adres (struct tuple4 addr)
{
  static char buf[256];
  strcpy (buf, int_ntoa (addr.saddr));
  sprintf (buf + strlen (buf), ",%i,", addr.source);
  strcat (buf, int_ntoa (addr.daddr));
  sprintf (buf + strlen (buf), ",%i", addr.dest);
  return buf;
}

void
tcp_callback (struct tcp_stream *tcp, struct session **conn)
{
	char buf[1024];
	FSTConn *c;

	strcpy (buf, adres (tcp->addr)); // we put conn params into buf
	
	switch (tcp->nids_state) {
	case NIDS_JUST_EST:
	{
		if (tcp->addr.dest!=1214) return;
		c=malloc(sizeof(struct session));
		if (!c)
			abort();

		c->in_xinu=c->out_xinu=0x51;
		c->in_cipher=c->out_cipher=NULL;
		c->state=STATE_CLIENT_KEY;

		*conn=c;
		
		tcp->client.collect++; // we want data received by a client
		tcp->server.collect++; // and by a server, too

		fprintf (stderr, "%s established\n", buf);
		return;
	}
	case NIDS_CLOSE:
		// connection has been closed normally
		fprintf (stderr, "%s closing\n", buf);
		return;
	case NIDS_RESET:
		// connection has been closed by RST
		fprintf (stderr, "%s reset\n", buf);
		break;
	case NIDS_DATA:
	{
		// new data has arrived; gotta determine in what direction
		// and if it's urgent or not

		struct half_stream *hlf;
		int len;
		c=*conn;

		if (tcp->client.count_new)
			hlf = &tcp->client; 
		else
			hlf = &tcp->server;
		len = hlf->count - hlf->offset;
		// (saddr, daddr, sport, dport) accompanied
		// by data flow direction (-> or <-)
		switch (c->state) {
		case STATE_CLIENT_KEY:
			if (len>=12) {
				if (!tcp->client.count_new)
					break;

				unsigned long rand, seed, enc_type;
				rand=INT(0);
				seed=INT(4);
				enc_type=INT(8);

				enc_type=fst_cipher_decode_enc_type(seed, enc_type);
				fprintf(stderr,buf);
				fprintf(stderr," got outgoing enc_type 0x%x",enc_type);
				nids_discard(tcp,12);
			} else {
				nids_discard(tcp,0);
			}
			break;

//		write(2,hlf->data,hlf->count_new); // we print the newly arrived data
	}
	}
	return;
}

int 
main ()
{
  // here we can alter libnids params, for instance:
  // nids_params.n_hosts=256;
  nids_params.device="ppp0";
  if (!nids_init ())
  {
  	fprintf(stderr,"%s\n",nids_errbuf);
  	exit(1);
  }
  nids_register_tcp (tcp_callback);
  nids_run ();
  return 0;
}

