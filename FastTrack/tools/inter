#!/usr/bin/perl -w
#
# $Id: inter,v 1.1 2004/03/11 03:02:28 hex Exp $
#
# Usage: ./inter host:port
#
# Send pings with 'p' (or 'ping'), pongs with 'o' (or 'pong')
# Send messages with the message type in hex, followed by a pack()
# letter and an eval'd value, or a quoted string, or unsigned
# decimal bytes optionally separated by dots.
#
# Examples: 
# '0' sends an empty message 0
# 'm2 1.2.3.4 n1214 80 0 "foo"' sends a typical login message
#
# '6 n1 n200 n0 1 C0xbf 1 5 0 w3 "mp3"' sends a typical search query
#
# You need a program named "hd" in your path, this will be used for
# hexdump output. I use "hd" from bsdmainutils.

#use Term::ReadLine::Gnu;
use subs qw[printbin];
use IO::Socket::INET;
#my $host="212.179.35.119:1214";
#my $host="24.247.74.238:3505";
my $host=shift;
#my $host="127.0.0.1:1234";
my $test=$host=~/test/;
my $xinu=0x51;

my $oldproto=0;

goto A if $test;

my $sock=IO::Socket::INET->new(PeerAddr=>$host) or die $!;

$|++;
my $enc=0;
my $rand=0xfa00b62b;
$rand=0xa0330d0a if $oldproto;
my $outseed=0x80;

print $sock pack"NNN",$rand,$outseed,$enc;

my $buf;

my $len;
$len=sysread($sock, $buf, 8);
die "failed to read incoming seed/type: $!" unless $len;
($inseed,$enc)=unpack"NN",$buf or die;

$w=sprintf"%x",$inseed;
chomp($x=`./xor $w`);
$enc^=hex$x;
$outseed^=$inseed;

printf "Received incoming enc_type: %x\n", $enc;

open (INCIPHER, sprintf("cat /dev/zero|./filter %x %x 2>/dev/null|", $enc, $inseed)) or die "failed to init incoming stream cipher";
open (OUTCIPHER, sprintf("cat /dev/zero|./filter %x %x 2>/dev/null|", $enc, $outseed)) or die "failed to init outgoing stream cipher";

if (!$oldproto) {
    my ($innet,$outnet);
    while ($len=sysread($sock, $buf, 1)) {
	encrypt(\*INCIPHER, $buf);
	last if $buf eq "\0";
	$innet.=$buf;
    }
    die "failed to read network name" if !$len;
    print "Got network name:\n";
    printbin $innet;

    print "Ours (null for same):";
    chomp($outnet=<>);
    $outnet||=$innet;
    $outnet.="\0";
    printbin $outnet;
    print $sock encrypt(\*OUTCIPHER, my $tempnet=$outnet);
}

my $child;
if (defined ($child=fork())) {
    if ($child) {
#	print "Listening\n";
	my $left=''; # in the middle of a message?
	my ($type,$len);
	while (sysread ($sock, $buf, 65536)) {
	    encrypt(\*INCIPHER, $buf);
#	    printf "Received %d bytes:\n", length $buf;
#	    printbin($buf);
	    for ($buf) {

		if ($len) {
		    if (/\G(.{$len})/sgc) {
			printbin $left.$1;
			$left='';
			$len=0;
			redo;
		    } else {
			/\G(.*)/sgc or die;
			$left.=$1;
			$len-=length $1;
			last;
		    }
		}

		print "Received ping\n" and redo if /\GP/gc;
		print "Received pong\n" and redo if /\GR/gc;
		if (/\GK(....)/gc) {
		    my $header=$1;
		    ($type,$len)=unpack_xinu(unpack"C*",$header);
		    printf "Received message type %x, len %d\n", $type, $len;
		    redo;
		}
		if ($_ && pos!=length) {
		    print "Unknown message header:\n";
		    printbin substr($_,pos);
		    die;
		}
	    }
	}
	print "[EOF]\n";
    } else {
A:
	while (<>) {
	    my $packet;
	  LOOP:
	    {
		$packet.='R', redo LOOP if (/\Gp?on?g?\s*/igc);
		$packet.='P', redo LOOP if (/\Gpi?n?g?\s*/gc);
		if (/\Gm?([0-9a-f]+)\s*/igc) {
		    my $type=hex $1;
		    my $msg='';
		  MSG:
		    {
			$msg.=pack($1, eval $2), redo MSG if /\G([A-Za-z])(.*?)\s+/gc;
			$msg.=pack("C*", split/\./, $1), redo MSG if /\G([0-9.]+)\s+/gc;
#			$msg.=chr hex $1, redo MSG if /\Gx([0-9a-f][0-9a-f]\s*)/gc;
			$msg.=eval"$1", redo MSG if /\G(".*?")\s*/gc;
		    }
			$packet.=message($type, $msg);
		    printf "Sending message type %x, len %d:\n", $type, length $msg;
		    printbin $msg;
		}
		warn "?: ".substr($_,pos) if $_ && defined pos && pos!=length;
	    }
	    if ($packet) {
		printf "Sending %d-byte packet\n", length $packet;
#		printbin $packet;
		unless ($test) {
		    encrypt(\*OUTCIPHER, $packet);
		    print $sock $packet;
		}
	    }
	}
    }
}

sub printbin {
    open(F,"|hd") or die;print F @_;
    close F;
}

sub unpack_xinu {
#    my @map=@{[[0,1,3,2],[1,3,0,2],[1,2,3,0]]->[$xinu %3]};
    my @map=@{[[0,1,3,2],[2,0,3,1],[3,0,1,2]]->[$xinu %3]};
#    printf "in_xinu: %x (%x)\n", $xinu, $xinu%3;
#    print "map: @map\n";
    my ($type,$len)=unpack'vv', pack'C*',@_[@map];
    $xinu^=$type+$len;
    $xinu^=0xffffffff;
    return ($type,$len);
}

sub pack_xinu {
    my @map=@{[[0,1,3,2],[2,0,3,1],[3,0,1,2]]->[$xinu %3]};
#    my @map=@{[[0,1,3,2],[1,3,0,2],[1,2,3,0]]->[$xinu %3]};
    my @a;
    @a[@map]=unpack'C*',pack'vv',@_;
    $xinu^=$_[0]+$_[1];
    $xinu^=0xffffffff;
    return @a;
}

sub message {
    my ($type, $buf)=@_;
    return 'K'.pack('C*',pack_xinu($type,length $buf)).$buf;
}

sub encrypt {
    return unless $_[1];
    my $stream;
    sysread($_[0], $stream, length $_[1]) or die length $_[1];
    $_[1]^="$stream";
}
